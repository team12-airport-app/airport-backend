{
  "info": {
    "name": "Flight Management API",
    "_postman_id": "8fb0b9de-7b8a-4bfc-9d1f-12a4e3a2b9a0",
    "description": "End-to-end tests for the airport backend: Questions (Q1–Q4), Airports CRUD, Airlines CRUD, Gates CRUD. Uses dynamic variables; safe to run repeatedly.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Questions (Q1–Q4 + helpers)",
      "item": [
        {
          "name": "Q1 GET /cities (captures testCityId)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/cities",
              "host": [ "{{baseUrl}}" ],
              "path": [ "cities" ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(Array.isArray(json)).to.be.true;",
                  "if (json.length) {",
                  "  pm.collectionVariables.set('testCityId', json[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Q2 GET /aircraft-with-passengers",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/aircraft-with-passengers",
              "host": [ "{{baseUrl}}" ],
              "path": [ "aircraft-with-passengers" ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(Array.isArray(json)).to.be.true;"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Q3a GET /aircraft-with-airports (captures aircraftId)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/aircraft-with-airports",
              "host": [ "{{baseUrl}}" ],
              "path": [ "aircraft-with-airports" ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(Array.isArray(json)).to.be.true;",
                  "if (json.length) { pm.collectionVariables.set('aircraftId', json[0].id); }"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Q3b GET /aircraft/{{aircraftId}}/flights",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/aircraft/{{aircraftId}}/flights",
              "host": [ "{{baseUrl}}" ],
              "path": [ "aircraft", "{{aircraftId}}", "flights" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('aircraftId')) {",
                  "  throw new Error('aircraftId is not set. Run Q3a first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.expect(Array.isArray(pm.response.json())).to.be.true;"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Q4 GET /passengers-with-airports",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/passengers-with-airports",
              "host": [ "{{baseUrl}}" ],
              "path": [ "passengers-with-airports" ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status 200\", () => pm.response.code === 200);",
                  "pm.expect(Array.isArray(pm.response.json())).to.be.true;"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Airports (Admin CRUD)",
      "item": [
        {
          "name": "List Airports (GET) — sets airportCode if empty",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/airports",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airports" ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(Array.isArray(json)).to.be.true;",
                  "if (!pm.collectionVariables.get('airportCode') && json.length) {",
                  "  pm.collectionVariables.set('airportCode', json[0].code || 'YYT');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Airport (POST) — captures createdAirportId",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{newAirportCode}}\",\n  \"name\": \"Test Airport {{timestamp}}\",\n  \"cityId\": {{testCityId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/manage/airports",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airports" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const ts = Date.now();",
                  "pm.collectionVariables.set('timestamp', ts);",
                  "const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
                  "const rand2 = letters[Math.floor(Math.random()*26)] + letters[Math.floor(Math.random()*26)];",
                  "pm.collectionVariables.set('newAirportCode', 'T' + rand2);",
                  "if (!pm.collectionVariables.get('testCityId')) {",
                  "  throw new Error('testCityId not set. Run Q1 first to capture a city.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 201', () => pm.response.code === 201 || pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('id');",
                  "pm.collectionVariables.set('createdAirportId', json.id);",
                  "pm.collectionVariables.set('airportCode', json.code);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Airport by ID (GET)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airports", "{{createdAirportId}}" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('createdAirportId')) {",
                  "  throw new Error('createdAirportId not set. Create Airport first.');",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.code === 200);",
                  "pm.expect(pm.response.json()).to.have.property('id');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Airport (PUT)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{newAirportCode}}\",\n  \"name\": \"Updated Test Airport {{timestamp}}\",\n  \"cityId\": {{testCityId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airports", "{{createdAirportId}}" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('createdAirportId')) throw new Error('createdAirportId not set');",
                  "if (!pm.collectionVariables.get('testCityId')) throw new Error('testCityId not set');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 200', () => pm.response.code === 200);",
                  "pm.expect(pm.response.json()).to.have.property('name');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Airport (DELETE)",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airports", "{{createdAirportId}}" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('createdAirportId')) throw new Error('createdAirportId not set');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status 204', () => pm.response.code === 204 || pm.response.code === 200);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Airlines (Admin CRUD)",
      "item": [
        {
          "name": "List Airlines (GET)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/airlines",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airlines" ]
            }
          },
          "event": [
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Create Airline (POST) — captures createdAirlineId",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{newAirlineCode}}\",\n  \"name\": \"{{newAirlineName}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/manage/airlines",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airlines" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
                  "const code = letters[Math.floor(Math.random()*26)] + letters[Math.floor(Math.random()*26)];",
                  "pm.collectionVariables.set('newAirlineCode', code);",
                  "pm.collectionVariables.set('newAirlineName', `Testline ${Date.now()}`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Created 201', () => pm.response.code === 201 || pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('id');",
                  "pm.collectionVariables.set('createdAirlineId', json.id);",
                  "pm.collectionVariables.set('createdAirlineCode', json.code);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Airline by ID (GET)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/airlines/{{createdAirlineId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airlines", "{{createdAirlineId}}" ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('createdAirlineId')) throw new Error('createdAirlineId not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);", "pm.expect(pm.response.json()).to.have.property('code');" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Update Airline (PUT)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{createdAirlineCode}}\",\n  \"name\": \"Updated Testline {{timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/manage/airlines/{{createdAirlineId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airlines", "{{createdAirlineId}}" ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('createdAirlineId')) throw new Error('createdAirlineId not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);", "pm.expect(pm.response.json()).to.have.property('name');" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Delete Airline (DELETE)",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/manage/airlines/{{createdAirlineId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "airlines", "{{createdAirlineId}}" ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('createdAirlineId')) throw new Error('createdAirlineId not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 204', () => pm.response.code === 204 || pm.response.code === 200);" ], "type": "text/javascript" } }
          ]
        }
      ]
    },
    {
      "name": "Gates (Admin CRUD + filter)",
      "item": [
        {
          "name": "List Gates (GET)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/gates",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "gates" ]
            }
          },
          "event": [
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Create Gate (POST) — captures createdGateId",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{newGateCode}}\",\n  \"description\": \"Gate for tests\",\n  \"airportCode\": \"{{airportCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/manage/gates",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "gates" ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.collectionVariables.get('airportCode')) throw new Error('airportCode not set. Run Airports → List first.');",
                  "const n = Math.floor(Math.random()*18)+1;",
                  "pm.collectionVariables.set('newGateCode', 'A' + n);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Created 201', () => pm.response.code === 201 || pm.response.code === 200);",
                  "const json = pm.response.json();",
                  "pm.expect(json).to.have.property('id');",
                  "pm.collectionVariables.set('createdGateId', json.id);",
                  "pm.collectionVariables.set('createdGateCode', json.code);"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Gates by Airport (GET ?airport={{airportCode}})",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/gates?airport={{airportCode}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "gates" ],
              "query": [ { "key": "airport", "value": "{{airportCode}}" } ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('airportCode')) throw new Error('airportCode not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);", "pm.expect(Array.isArray(pm.response.json())).to.be.true;" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Get Gate by ID (GET)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/manage/gates/{{createdGateId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "gates", "{{createdGateId}}" ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('createdGateId')) throw new Error('createdGateId not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Update Gate (PUT)",
          "request": {
            "method": "PUT",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"code\": \"{{createdGateCode}}\",\n  \"description\": \"Updated Gate {{timestamp}}\",\n  \"airportCode\": \"{{airportCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/manage/gates/{{createdGateId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "gates", "{{createdGateId}}" ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('createdGateId')) throw new Error('createdGateId not set');", "if (!pm.collectionVariables.get('airportCode')) throw new Error('airportCode not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 200', () => pm.response.code === 200);" ], "type": "text/javascript" } }
          ]
        },
        {
          "name": "Delete Gate (DELETE)",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/manage/gates/{{createdGateId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "manage", "gates", "{{createdGateId}}" ]
            }
          },
          "event": [
            { "listen": "prerequest", "script": { "exec": [ "if (!pm.collectionVariables.get('createdGateId')) throw new Error('createdGateId not set');" ], "type": "text/javascript" } },
            { "listen": "test", "script": { "exec": [ "pm.test('Status 204', () => pm.response.code === 204 || pm.response.code === 200);" ], "type": "text/javascript" } }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Ensure baseUrl exists (fallback to localhost:8080)",
          "if (!pm.collectionVariables.get('baseUrl')) {",
          "  pm.collectionVariables.set('baseUrl', 'http://localhost:8080');",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8080" },
    { "key": "airportCode", "value": "YYT" }
  ]
}
