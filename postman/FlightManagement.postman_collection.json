{
  "info": {
    "name": "Flight Management API",
    "_postman_id": "f3a8a0da-1111-2222-3333-444455556666",
    "description": "manual + automated tests for Q1â€“Q4 and Airports CRUD. Uses collection variables as defaults.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:8080" },
    { "key": "aircraftId", "value": "1" },
    { "key": "testCityId", "value": "" },
    { "key": "createdAirportId", "value": "" }
  ],
  "item": [
    {
      "name": "Questions (Read-Only GETs)",
      "item": [
        {
          "name": "1: What airports are there in each city? (GET /cities)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/cities", "host": ["{{baseUrl}}"], "path": ["cities"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.test(\"Array\", () => pm.expect(data).to.be.an(\"array\"));",
                  "if (data.length) {",
                  "  pm.test(\"City has id/name/airports[]\", () => {",
                  "    pm.expect(data[0]).to.have.property(\"id\");",
                  "    pm.expect(data[0]).to.have.property(\"name\");",
                  "    pm.expect(data[0]).to.have.property(\"airports\");",
                  "    pm.expect(data[0].airports).to.be.an(\"array\");",
                  "  });",
                  "  // Capture a city id for CRUD create step",
                  "  pm.collectionVariables.set(\"testCityId\", data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2: What aircraft has each passenger flown on? (GET /aircraft-with-passengers)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/aircraft-with-passengers", "host": ["{{baseUrl}}"], "path": ["aircraft-with-passengers"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.test(\"Array with passengers[]\", () => {",
                  "  pm.expect(data).to.be.an(\"array\");",
                  "  if (data.length) {",
                  "    pm.expect(data[0]).to.have.property(\"passengers\");",
                  "    pm.expect(data[0].passengers).to.be.an(\"array\");",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3a: What airports do aircraft use? (GET /aircraft-with-airports)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/aircraft-with-airports", "host": ["{{baseUrl}}"], "path": ["aircraft-with-airports"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.test(\"Array with airports[]\", () => {",
                  "  pm.expect(data).to.be.an(\"array\");",
                  "  if (data.length) {",
                  "    pm.expect(data[0]).to.have.property(\"airports\");",
                  "    pm.expect(data[0].airports).to.be.an(\"array\");",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3b: Flights for a specific aircraft (GET /aircraft/{{aircraftId}}/flights)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/aircraft/{{aircraftId}}/flights", "host": ["{{baseUrl}}"], "path": ["aircraft", "{{aircraftId}}", "flights"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.test(\"Array (may be empty)\", () => pm.expect(data).to.be.an(\"array\"));",
                  "if (data.length) {",
                  "  pm.test(\"Flight has core fields\", () => {",
                  "    pm.expect(data[0]).to.have.keys([",
                  "      \"id\",\"aircraftId\",\"fromAirportId\",\"fromAirportCode\",",
                  "      \"toAirportId\",\"toAirportCode\",\"departedAt\",\"arrivedAt\"",
                  "    ]);",
                  "  });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4: What airports have passengers used? (GET /passengers-with-airports)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/passengers-with-airports", "host": ["{{baseUrl}}"], "path": ["passengers-with-airports"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const data = pm.response.json();",
                  "pm.test(\"Array of { passenger, airports[] }\", () => {",
                  "  pm.expect(data).to.be.an(\"array\");",
                  "  if (data.length) {",
                  "    pm.expect(data[0]).to.have.keys([\"passenger\",\"airports\"]);",
                  "    pm.expect(data[0].airports).to.be.an(\"array\");",
                  "  }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Airports (CRUD)",
      "item": [
        {
          "name": "List Airports (GET /manage/airports)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/manage/airports", "host": ["{{baseUrl}}"], "path": ["manage", "airports"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "pm.test(\"Array\", () => pm.expect(pm.response.json()).to.be.an(\"array\"));"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Airport (POST /manage/airports)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Postman Test Airport\",\n  \"code\": \"PTA\",\n  \"cityId\": {{testCityId}}\n}"
            },
            "url": { "raw": "{{baseUrl}}/manage/airports", "host": ["{{baseUrl}}"], "path": ["manage", "airports"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
                  "const a = pm.response.json();",
                  "pm.test(\"Has id/name/code\", () => {",
                  "  pm.expect(a).to.have.property(\"id\");",
                  "  pm.expect(a).to.have.property(\"name\");",
                  "  pm.expect(a).to.have.property(\"code\");",
                  "});",
                  "// save id for later steps",
                  "pm.collectionVariables.set(\"createdAirportId\", a.id);"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Airport by ID (GET /manage/airports/{{createdAirportId}})",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}", "host": ["{{baseUrl}}"], "path": ["manage", "airports", "{{createdAirportId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
                  "const a = pm.response.json();",
                  "pm.test(\"Matches createdAirportId\", () => {",
                  "  pm.expect(String(a.id)).to.eql(String(pm.collectionVariables.get(\"createdAirportId\")));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Airport (PUT /manage/airports/{{createdAirportId}})",
          "request": {
            "method": "PUT",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Postman Test Airport - Updated\",\n  \"code\": \"PTU\",\n  \"cityId\": {{testCityId}}\n}"
            },
            "url": { "raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}", "host": ["{{baseUrl}}"], "path": ["manage", "airports", "{{createdAirportId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"200 OK\", () => pm.response.to.have.status(200));"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Airport (DELETE /manage/airports/{{createdAirportId}})",
          "request": {
            "method": "DELETE",
            "url": { "raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}", "host": ["{{baseUrl}}"], "path": ["manage", "airports", "{{createdAirportId}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"204 No Content\", () => pm.response.to.have.status(204));"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Reference GETs",
      "item": [
        {
          "name": "List Cities (GET /cities)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/cities", "host": ["{{baseUrl}}"], "path": ["cities"] }
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": ["pm.test(\"200 OK\", () => pm.response.to.have.status(200));"] }
            }
          ]
        },
        {
          "name": "List Passengers (GET /passengers)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/passengers", "host": ["{{baseUrl}}"], "path": ["passengers"] }
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": ["pm.test(\"200 OK\", () => pm.response.to.have.status(200));"] }
            }
          ]
        },
        {
          "name": "List Aircraft (GET /aircraft)",
          "request": {
            "method": "GET",
            "url": { "raw": "{{baseUrl}}/aircraft", "host": ["{{baseUrl}}"], "path": ["aircraft"] }
          },
          "event": [
            {
              "listen": "test",
              "script": { "type": "text/javascript", "exec": ["pm.test(\"200 OK\", () => pm.response.to.have.status(200));"] }
            }
          ]
        }
      ]
    }
  ]
}
