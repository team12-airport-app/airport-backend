{
	"info": {
		"_postman_id": "27cf29e6-ff5e-402d-b27f-1ddf2b3aad6a",
		"name": "Team12 Flight Management API",
		"description": "Flight Management API collection (assignment Q1–Q4 + Admin CRUD for Airports, Airlines, Gates). Matches the current backend.\n\nVariables:\n- baseUrl: http://localhost:8080\n- airportCode: YYT (used by Gates create/filter)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47472558",
		"_collection_link": "https://chris-morrison-5412161.postman.co/workspace/Chris-Morrison's-Workspace~79600fa4-3f87-4cd5-8d7e-4a971177240e/collection/47472558-27cf29e6-ff5e-402d-b27f-1ddf2b3aad6a?action=share&source=collection_link&creator=47472558"
	},
	"item": [
		{
			"name": "Assignment / Reports",
			"item": [
				{
					"name": "Q1 - GET /cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.expect(Array.isArray(data)).to.be.true;",
									"if (data.length > 0 && data[0].id) {",
									"  pm.collectionVariables.set('testCityId', data[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/cities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q2 - GET /aircraft-with-passengers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.expect(Array.isArray(data)).to.be.true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft-with-passengers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft-with-passengers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q3a - GET /aircraft-with-airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.expect(Array.isArray(data)).to.be.true;",
									"if (data.length > 0 && data[0].id) {",
									"  pm.collectionVariables.set('aircraftId', data[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft-with-airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft-with-airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q3b - GET /aircraft/{{aircraftId}}/flights",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('aircraftId')) {",
									"  throw new Error('aircraftId is not set. Run Q3a first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.expect(Array.isArray(data)).to.be.true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/aircraft/{{aircraftId}}/flights",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"aircraft",
								"{{aircraftId}}",
								"flights"
							]
						}
					},
					"response": []
				},
				{
					"name": "Q4 - GET /passengers-with-airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.expect(Array.isArray(data)).to.be.true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/passengers-with-airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"passengers-with-airports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin — Airports",
			"item": [
				{
					"name": "List Airports - GET /manage/airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"const data = pm.response.json();",
									"pm.expect(Array.isArray(data)).to.be.true;",
									"// Set airportCode from first item if not already defined",
									"if (!pm.collectionVariables.get('airportCode') && data.length > 0 && data[0].code) {",
									"  pm.collectionVariables.set('airportCode', data[0].code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Airport - POST /manage/airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 201', () => pm.response.to.have.status(201));",
									"const data = pm.response.json();",
									"pm.collectionVariables.set('createdAirportId', data.id);",
									"pm.collectionVariables.set('airportCode', data.code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Airport\",\n  \"code\": \"TST\",\n  \"cityId\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/manage/airports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airports"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Airport by ID - GET /manage/airports/{{createdAirportId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdAirportId')) {",
									"  throw new Error('createdAirportId is not set. Run Create Airport first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airports",
								"{{createdAirportId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Airport - PUT /manage/airports/{{createdAirportId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdAirportId')) {",
									"  throw new Error('createdAirportId is not set. Run Create Airport first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Airport (Updated)\",\n  \"code\": \"TST\",\n  \"cityId\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airports",
								"{{createdAirportId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Airport - DELETE /manage/airports/{{createdAirportId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdAirportId')) {",
									"  throw new Error('createdAirportId is not set. Run Create Airport first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200 or 204', function () {",
									"  pm.expect([200,204]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/airports/{{createdAirportId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airports",
								"{{createdAirportId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin — Airlines",
			"item": [
				{
					"name": "List Airlines - GET /manage/airlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"pm.expect(Array.isArray(pm.response.json())).to.be.true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/airlines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Airline - POST /manage/airlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 201', () => pm.response.to.have.status(201));",
									"const data = pm.response.json();",
									"pm.collectionVariables.set('createdAirlineId', data.id);",
									"pm.collectionVariables.set('createdAirlineCode', data.code);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"AC\",\n  \"name\": \"Air Canada\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/manage/airlines",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airlines"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Airline by ID - GET /manage/airlines/{{createdAirlineId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdAirlineId')) {",
									"  throw new Error('createdAirlineId is not set. Run Create Airline first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/airlines/{{createdAirlineId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airlines",
								"{{createdAirlineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Airline - PUT /manage/airlines/{{createdAirlineId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdAirlineId')) {",
									"  throw new Error('createdAirlineId is not set. Run Create Airline first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"AC\",\n  \"name\": \"Air Canada (Updated)\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/manage/airlines/{{createdAirlineId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airlines",
								"{{createdAirlineId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Airline - DELETE /manage/airlines/{{createdAirlineId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdAirlineId')) {",
									"  throw new Error('createdAirlineId is not set. Run Create Airline first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200 or 204', function () {",
									"  pm.expect([200,204]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/airlines/{{createdAirlineId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"airlines",
								"{{createdAirlineId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin — Gates",
			"item": [
				{
					"name": "List Gates - GET /manage/gates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"pm.expect(Array.isArray(pm.response.json())).to.be.true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/gates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"gates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Gate - POST /manage/gates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 201', () => pm.response.to.have.status(201));",
									"const data = pm.response.json();",
									"pm.collectionVariables.set('createdGateId', data.id);",
									"pm.collectionVariables.set('createdGateCode', data.code);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"A24\",\n  \"description\": \"Runner create test\",\n  \"airportCode\": \"YYT\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/manage/gates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"gates"
							]
						}
					},
					"response": []
				},
				{
					"name": "List Gates by Airport - GET /manage/gates?airport={{airportCode}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));",
									"pm.expect(Array.isArray(pm.response.json())).to.be.true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/gates?airport={{airportCode}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"gates"
							],
							"query": [
								{
									"key": "airport",
									"value": "{{airportCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Gate by ID - GET /manage/gates/{{createdGateId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdGateId')) {",
									"  throw new Error('createdGateId is not set. Run Create Gate first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/gates/{{createdGateId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"gates",
								"{{createdGateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Gate - PUT /manage/gates/{{createdGateId}} (all fields required)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdGateId')) {",
									"  throw new Error('createdGateId is not set. Run Create Gate first.');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200', () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"code\": \"A24\",\n  \"description\": \"Runner create test — updated\",\n  \"airportCode\": \"YYT\"\n}\n"
						},
						"url": {
							"raw": "{{baseUrl}}/manage/gates/{{createdGateId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"gates",
								"{{createdGateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Gate - DELETE /manage/gates/{{createdGateId}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.collectionVariables.get('createdGateId')) {",
									"  throw new Error('createdGateId is not set. Run Create Gate first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status 200 or 204', function () {",
									"  pm.expect([200,204]).to.include(pm.response.code);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/manage/gates/{{createdGateId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"manage",
								"gates",
								"{{createdGateId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "airportCode",
			"value": "YYT",
			"type": "string"
		},
		{
			"key": "testCityId",
			"value": "",
			"type": "string"
		},
		{
			"key": "aircraftId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdAirportId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdAirlineId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdAirlineCode",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdGateId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdGateCode",
			"value": "",
			"type": "string"
		}
	]
}